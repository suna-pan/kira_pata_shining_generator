// Generated by CoffeeScript 1.10.0
(function() {
  $(function() {
    var draw_res, f_delta_h, f_delta_x, f_rep_cnt, f_right, file, hsv_to_rgb, proc_image, res_canvas, res_ctx, result, rgb_to_hsv, tmp_canvas, tmp_ctx;
    file = null;
    result = $('#result_image');
    f_rep_cnt = $('#rep_count');
    f_delta_x = $('#delta_x');
    f_delta_h = $('#delta_h');
    f_right = $('#right');
    f_rep_cnt.val('5');
    f_delta_x.val('80');
    f_delta_h.val('30');
    tmp_canvas = $('#tmp_canvas');
    res_canvas = $('#res_canvas');
    tmp_ctx = tmp_canvas[0].getContext('2d');
    res_ctx = res_canvas[0].getContext('2d');
    result.hide();
    tmp_canvas.hide();
    res_canvas.hide();
    draw_res = function(x, w, h, image_data) {
      var idx, j, k, ref, ref1, res_image, xx, y;
      res_image = res_ctx.getImageData(x, 0, w, h);
      for (y = j = 0, ref = h; 0 <= ref ? j <= ref : j >= ref; y = 0 <= ref ? ++j : --j) {
        for (xx = k = 0, ref1 = w; 0 <= ref1 ? k <= ref1 : k >= ref1; xx = 0 <= ref1 ? ++k : --k) {
          idx = (w * y + xx) * 4;
          if (image_data.data[idx + 3] !== 255) {
            continue;
          }
          res_image.data[idx + 0] = image_data.data[idx + 0];
          res_image.data[idx + 1] = image_data.data[idx + 1];
          res_image.data[idx + 2] = image_data.data[idx + 2];
          res_image.data[idx + 3] = image_data.data[idx + 3];
        }
      }
      return res_ctx.putImageData(res_image, x, 0);
    };
    rgb_to_hsv = function(rgb) {
      var _h, hsv, max, min;
      max = rgb.r;
      if (rgb.g > max) {
        max = rgb.g;
      }
      if (rgb.b > max) {
        max = rgb.b;
      }
      min = rgb.r;
      if (rgb.g < min) {
        max = rgb.g;
      }
      if (rgb.b < min) {
        max = rgb.b;
      }
      _h = 0;
      if (max !== min) {
        if (min === rgb.b) {
          _h = 60 * (rgb.b - rgb.r) / (max - min) + 60;
        } else if (min === rgb.r) {
          _h = 60 * (rgb.b - rgb.g) / (max - min) + 180;
        } else if (min === rgb.g) {
          _h = 60 * (rgb.r - rgb.b) / (max - min) + 300;
        }
        while (_h < 0) {
          _h += 360;
        }
        if (_h > 360) {
          _h %= 360;
        }
      }
      hsv = {
        h: _h,
        v: max,
        s: max - min
      };
      return hsv;
    };
    hsv_to_rgb = function(hsv) {
      var _h, n, rgb, x;
      rgb = {
        r: 0,
        g: 0,
        b: 0
      };
      _h = hsv.h / 60;
      n = hsv.v - hsv.s;
      x = hsv.s * (1 - Math.abs(_h % 2 - 1));
      if (_h < 1) {
        rgb.r = n + hsv.s;
        rgb.g = n + x;
        rgb.b = n;
      } else if (_h < 2) {
        rgb.r = n + x;
        rgb.g = n + hsv.s;
        rgb.b = n;
      } else if (_h < 3) {
        rgb.r = n;
        rgb.g = n + hsv.s;
        rgb.b = n + x;
      } else if (_h < 4) {
        rgb.r = n;
        rgb.g = n + x;
        rgb.b = n + hsv.s;
      } else if (_h < 5) {
        rgb.r = n + x;
        rgb.g = n;
        rgb.b = n + hsv.s;
      } else {
        rgb.r = n + hsv.s;
        rgb.g = n;
        rgb.b = n + x;
      }
      return rgb;
    };
    proc_image = function(w, h, image_data, d) {
      var hsv, idx, j, k, ref, ref1, rgb, x, y;
      for (y = j = 0, ref = h; 0 <= ref ? j <= ref : j >= ref; y = 0 <= ref ? ++j : --j) {
        for (x = k = 0, ref1 = w; 0 <= ref1 ? k <= ref1 : k >= ref1; x = 0 <= ref1 ? ++k : --k) {
          idx = (w * y + x) * 4;
          if (image_data.data[idx + 3] !== 255) {
            continue;
          }
          rgb = {
            r: image_data.data[idx + 0] / 255.0,
            g: image_data.data[idx + 1] / 255.0,
            b: image_data.data[idx + 2] / 255.0
          };
          hsv = rgb_to_hsv(rgb);
          hsv.h = (hsv.h + d) % 360;
          rgb = hsv_to_rgb(hsv);
          image_data.data[idx + 0] = rgb.r * 255.0 + 0.5;
          image_data.data[idx + 1] = rgb.g * 255.0 + 0.5;
          image_data.data[idx + 2] = rgb.b * 255.0 + 0.5;
        }
      }
      return image_data;
    };
    $('#selectFile').change(function() {
      return file = this.files[0];
    });
    return $('#process').click(function() {
      var delta_h, delta_x, image, reader, rep_cnt, right;
      if (file === null) {
        return;
      }
      rep_cnt = parseInt(f_rep_cnt.val(), 10);
      delta_x = parseInt(f_delta_x.val(), 10);
      delta_h = parseInt(f_delta_h.val(), 10);
      right = f_right.prop('checked');
      if (!file.type.match(/^image\/(png|jpeg|jpg|gif)$/)) {
        return;
      }
      image = new Image();
      reader = new FileReader();
      reader.onload = function(evt) {
        image.onload = function() {
          var dh, h, i, image_data, img, j, png, ref, rw, w;
          res_canvas.hide();
          w = this.width;
          h = this.height;
          rw = w + (rep_cnt - 1) * delta_x;
          tmp_canvas.attr('width', w);
          tmp_canvas.attr('height', h);
          res_canvas.attr('width', rw);
          res_canvas.attr('height', h);
          tmp_ctx.drawImage(image, 0, 0);
          for (i = j = 0, ref = rep_cnt - 1; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
            if (right) {
              i = (rep_cnt - 1) - i;
            }
            image_data = tmp_ctx.getImageData(0, 0, w, h);
            if (right) {
              dh = i;
            }
            if (!right) {
              dh = rep_cnt - 1 - i;
            }
            img = proc_image(w, h, image_data, delta_h * dh);
            draw_res(i * delta_x, w, h, img);
          }
          image_data = tmp_ctx.getImageData(0, 0, w, h);
          if (!right) {
            draw_res((rep_cnt - 1) * delta_x, w, h, image_data);
          }
          if (right) {
            draw_res(0, w, h, image_data);
          }
          png = res_canvas.get(0).toDataURL();
          result.attr('width', rw);
          result.attr('height', h);
          result.attr('src', png);
          return result.show();
        };
        return image.src = evt.target.result;
      };
      return reader.readAsDataURL(file);
    });
  });

}).call(this);
